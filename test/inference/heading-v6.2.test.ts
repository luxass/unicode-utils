/**
 * This file is auto-generated by scripts/generate-infer-test-files.ts
 * Do not edit it manually.
 * To regenerate, run the script with:
 *  pnpm run generate:infer-test-files
 */
import { describe, expect, it } from "vitest";
import { inferHeading } from "../../src/inference/heading";
import { mapUCDFiles } from "../__utils";

const ucdFiles = await mapUCDFiles("v6.2.0");

describe("heading inference v6.2", async () => {
  it("inferHeading(ArabicShaping.txt)", () => {
    const content = ucdFiles.file("ArabicShaping.txt");
    const expected = ucdFiles.expected("/ArabicShaping.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(BidiMirroring.txt)", () => {
    const content = ucdFiles.file("BidiMirroring.txt");
    const expected = ucdFiles.expected("/BidiMirroring.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(Blocks.txt)", () => {
    const content = ucdFiles.file("Blocks.txt");
    const expected = ucdFiles.expected("/Blocks.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(CJKRadicals.txt)", () => {
    const content = ucdFiles.file("CJKRadicals.txt");
    const expected = ucdFiles.expected("/CJKRadicals.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(CaseFolding.txt)", () => {
    const content = ucdFiles.file("CaseFolding.txt");
    const expected = ucdFiles.expected("/CaseFolding.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(CompositionExclusions.txt)", () => {
    const content = ucdFiles.file("CompositionExclusions.txt");
    const expected = ucdFiles.expected("/CompositionExclusions.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(DerivedAge.txt)", () => {
    const content = ucdFiles.file("DerivedAge.txt");
    const expected = ucdFiles.expected("/DerivedAge.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(DerivedCoreProperties.txt)", () => {
    const content = ucdFiles.file("DerivedCoreProperties.txt");
    const expected = ucdFiles.expected("/DerivedCoreProperties.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(DerivedNormalizationProps.txt)", () => {
    const content = ucdFiles.file("DerivedNormalizationProps.txt");
    const expected = ucdFiles.expected("/DerivedNormalizationProps.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(EastAsianWidth.txt)", () => {
    const content = ucdFiles.file("EastAsianWidth.txt");
    const expected = ucdFiles.expected("/EastAsianWidth.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(EmojiSources.txt)", () => {
    const content = ucdFiles.file("EmojiSources.txt");
    const expected = ucdFiles.expected("/EmojiSources.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(HangulSyllableType.txt)", () => {
    const content = ucdFiles.file("HangulSyllableType.txt");
    const expected = ucdFiles.expected("/HangulSyllableType.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(Index.txt)", () => {
    const content = ucdFiles.file("Index.txt");
    const expected = ucdFiles.expected("/Index.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(IndicMatraCategory.txt)", () => {
    const content = ucdFiles.file("IndicMatraCategory.txt");
    const expected = ucdFiles.expected("/IndicMatraCategory.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(IndicSyllabicCategory.txt)", () => {
    const content = ucdFiles.file("IndicSyllabicCategory.txt");
    const expected = ucdFiles.expected("/IndicSyllabicCategory.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(Jamo.txt)", () => {
    const content = ucdFiles.file("Jamo.txt");
    const expected = ucdFiles.expected("/Jamo.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(LineBreak.txt)", () => {
    const content = ucdFiles.file("LineBreak.txt");
    const expected = ucdFiles.expected("/LineBreak.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(NameAliases.txt)", () => {
    const content = ucdFiles.file("NameAliases.txt");
    const expected = ucdFiles.expected("/NameAliases.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(NamedSequences.txt)", () => {
    const content = ucdFiles.file("NamedSequences.txt");
    const expected = ucdFiles.expected("/NamedSequences.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(NamedSequencesProv.txt)", () => {
    const content = ucdFiles.file("NamedSequencesProv.txt");
    const expected = ucdFiles.expected("/NamedSequencesProv.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(NamesList.txt)", () => {
    const content = ucdFiles.file("NamesList.txt");
    const expected = ucdFiles.expected("/NamesList.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(NormalizationCorrections.txt)", () => {
    const content = ucdFiles.file("NormalizationCorrections.txt");
    const expected = ucdFiles.expected("/NormalizationCorrections.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(PropList.txt)", () => {
    const content = ucdFiles.file("PropList.txt");
    const expected = ucdFiles.expected("/PropList.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(PropertyAliases.txt)", () => {
    const content = ucdFiles.file("PropertyAliases.txt");
    const expected = ucdFiles.expected("/PropertyAliases.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(PropertyValueAliases.txt)", () => {
    const content = ucdFiles.file("PropertyValueAliases.txt");
    const expected = ucdFiles.expected("/PropertyValueAliases.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(ReadMe.txt)", () => {
    const content = ucdFiles.file("ReadMe.txt");
    const expected = ucdFiles.expected("/ReadMe.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(ScriptExtensions.txt)", () => {
    const content = ucdFiles.file("ScriptExtensions.txt");
    const expected = ucdFiles.expected("/ScriptExtensions.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(Scripts.txt)", () => {
    const content = ucdFiles.file("Scripts.txt");
    const expected = ucdFiles.expected("/Scripts.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(SpecialCasing.txt)", () => {
    const content = ucdFiles.file("SpecialCasing.txt");
    const expected = ucdFiles.expected("/SpecialCasing.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(StandardizedVariants.txt)", () => {
    const content = ucdFiles.file("StandardizedVariants.txt");
    const expected = ucdFiles.expected("/StandardizedVariants.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(USourceData.txt)", () => {
    const content = ucdFiles.file("USourceData.txt");
    const expected = ucdFiles.expected("/USourceData.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(UnicodeData.txt)", () => {
    const content = ucdFiles.file("UnicodeData.txt");
    const expected = ucdFiles.expected("/UnicodeData.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(auxiliary/GraphemeBreakProperty.txt)", () => {
    const content = ucdFiles.file("auxiliary/GraphemeBreakProperty.txt");
    const expected = ucdFiles.expected("auxiliary/GraphemeBreakProperty.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(auxiliary/SentenceBreakProperty.txt)", () => {
    const content = ucdFiles.file("auxiliary/SentenceBreakProperty.txt");
    const expected = ucdFiles.expected("auxiliary/SentenceBreakProperty.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(auxiliary/WordBreakProperty.txt)", () => {
    const content = ucdFiles.file("auxiliary/WordBreakProperty.txt");
    const expected = ucdFiles.expected("auxiliary/WordBreakProperty.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(extracted/DerivedBidiClass.txt)", () => {
    const content = ucdFiles.file("extracted/DerivedBidiClass.txt");
    const expected = ucdFiles.expected("extracted/DerivedBidiClass.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(extracted/DerivedBinaryProperties.txt)", () => {
    const content = ucdFiles.file("extracted/DerivedBinaryProperties.txt");
    const expected = ucdFiles.expected("extracted/DerivedBinaryProperties.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(extracted/DerivedCombiningClass.txt)", () => {
    const content = ucdFiles.file("extracted/DerivedCombiningClass.txt");
    const expected = ucdFiles.expected("extracted/DerivedCombiningClass.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(extracted/DerivedDecompositionType.txt)", () => {
    const content = ucdFiles.file("extracted/DerivedDecompositionType.txt");
    const expected = ucdFiles.expected("extracted/DerivedDecompositionType.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(extracted/DerivedEastAsianWidth.txt)", () => {
    const content = ucdFiles.file("extracted/DerivedEastAsianWidth.txt");
    const expected = ucdFiles.expected("extracted/DerivedEastAsianWidth.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(extracted/DerivedGeneralCategory.txt)", () => {
    const content = ucdFiles.file("extracted/DerivedGeneralCategory.txt");
    const expected = ucdFiles.expected("extracted/DerivedGeneralCategory.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(extracted/DerivedJoiningGroup.txt)", () => {
    const content = ucdFiles.file("extracted/DerivedJoiningGroup.txt");
    const expected = ucdFiles.expected("extracted/DerivedJoiningGroup.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(extracted/DerivedJoiningType.txt)", () => {
    const content = ucdFiles.file("extracted/DerivedJoiningType.txt");
    const expected = ucdFiles.expected("extracted/DerivedJoiningType.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(extracted/DerivedLineBreak.txt)", () => {
    const content = ucdFiles.file("extracted/DerivedLineBreak.txt");
    const expected = ucdFiles.expected("extracted/DerivedLineBreak.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(extracted/DerivedNumericType.txt)", () => {
    const content = ucdFiles.file("extracted/DerivedNumericType.txt");
    const expected = ucdFiles.expected("extracted/DerivedNumericType.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("inferHeading(extracted/DerivedNumericValues.txt)", () => {
    const content = ucdFiles.file("extracted/DerivedNumericValues.txt");
    const expected = ucdFiles.expected("extracted/DerivedNumericValues.comments.txt");

    expect(inferHeading(content)).toBe(expected);
  });

  it("ensure that all files have been tested", () => {
    expect(ucdFiles.files).toEqual([]);
    expect(ucdFiles.files.length).toBe(0);
  });
});
